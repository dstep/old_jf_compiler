/*** Generated by LEXX. Do not edit ***/

#include <Parser/LexerImpl.h>

using namespace jf::parser;

#define LEXX_CONSUME_UNEXPECTED lexer->countUnexpected(lexem_start, lexem_length)
#define LEXX_USERPARAM jf::parser::Lexer* lexer,

#define KWD(t) lexer->countKeyword(Token::K##t, sizeof(#t) - 1);
#define OP(t) lexer->countKeyword(Token::O##t, lexem_length);



typedef unsigned char lexx_byte;
typedef size_t lexx_size;
#define lexem_length (data - lexem_start)
#define LEXX_UNPUT(n) (data -= n)
#define LEXX_GOTO(state) goto state
#if !defined(LEXX_CONSUME_UNEXPECTED)
#define LEXX_CONSUME_UNEXPECTED
#endif
#if !defined(LEXX_USERPARAM)
#define LEXX_USERPARAM
#endif

void lexx_run(LEXX_USERPARAM const lexx_byte* data, lexx_size size){
	const lexx_byte* data_end = data + size;
	const lexx_byte* lexem_start = data;
	goto INITIAL;
	COMMENT:
	lexem_start = data;
	goto COMMENT_1;
	COMMENT_1:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->reportHere(LexerError::UnterminatedComment);

				return;
			}else{
				data++;
				goto COMMENT_2;
			}
		}break;
		case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 92:case 93:case 94:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 126:case 127:case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto COMMENT_2;
		}break;
		case 45:{
		data++;
		goto COMMENT_3;
		}break;
		}
	COMMENT_2:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countCodepoints(lexem_start, lexem_length);

				goto COMMENT;
			}else{
				data++;
				goto COMMENT_2;
			}
		}break;
		case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 92:case 93:case 94:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 126:case 127:case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto COMMENT_2;
		}break;
		default:{
				lexer->countCodepoints(lexem_start, lexem_length);

			goto COMMENT;
		}break;
		}
	COMMENT_3:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(1);
					 

				goto COMMENT;
			}else{
					lexer->countChars(1);
					 

				goto COMMENT;
			}
		}break;
		case 125:{
		data++;
		goto COMMENT_4;
		}break;
		default:{
				lexer->countChars(1);
				 

			goto COMMENT;
		}break;
		}
	COMMENT_4:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(2);
					LEXX_GOTO(INITIAL);

				goto COMMENT;
			}else{
					lexer->countChars(2);
					LEXX_GOTO(INITIAL);

				goto COMMENT;
			}
		}break;
		default:{
				lexer->countChars(2);
				LEXX_GOTO(INITIAL);

			goto COMMENT;
		}break;
		}
	STRING_LITERAL_GLUE:
	lexem_start = data;
	goto STRING_LITERAL_GLUE_3;
	STRING_LITERAL_GLUE_1:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countNewline();

				goto STRING_LITERAL_GLUE;
			}else{
					lexer->countNewline();

				goto STRING_LITERAL_GLUE;
			}
		}break;
		case 10:{
		data++;
		goto STRING_LITERAL_GLUE_8;
		}break;
		default:{
				lexer->countNewline();

			goto STRING_LITERAL_GLUE;
		}break;
		}
	STRING_LITERAL_GLUE_2:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(1);
					LEXX_GOTO(STRING_LITERAL);

				goto STRING_LITERAL_GLUE;
			}else{
					lexer->countChars(1);
					LEXX_GOTO(STRING_LITERAL);

				goto STRING_LITERAL_GLUE;
			}
		}break;
		default:{
				lexer->countChars(1);
				LEXX_GOTO(STRING_LITERAL);

			goto STRING_LITERAL_GLUE;
		}break;
		}
	STRING_LITERAL_GLUE_3:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->endBuffer(Token::StringLiteral);

				return;
			}else{
				data++;
				goto STRING_LITERAL_GLUE_4;
			}
		}break;
		case 9:case 32:{
		data++;
		goto STRING_LITERAL_GLUE_5;
		}break;
		case 10:{
		data++;
		goto STRING_LITERAL_GLUE_7;
		}break;
		case 34:{
		data++;
		goto STRING_LITERAL_GLUE_2;
		}break;
		case 13:{
		data++;
		goto STRING_LITERAL_GLUE_1;
		}break;
		case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 33:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 92:case 93:case 94:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 126:case 127:case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto STRING_LITERAL_GLUE_4;
		}break;
		}
	STRING_LITERAL_GLUE_4:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->endBuffer(Token::StringLiteral);
					LEXX_UNPUT(1);
					LEXX_GOTO(INITIAL);

				goto STRING_LITERAL_GLUE;
			}else{
					lexer->endBuffer(Token::StringLiteral);
					LEXX_UNPUT(1);
					LEXX_GOTO(INITIAL);

				goto STRING_LITERAL_GLUE;
			}
		}break;
		default:{
				lexer->endBuffer(Token::StringLiteral);
				LEXX_UNPUT(1);
				LEXX_GOTO(INITIAL);

			goto STRING_LITERAL_GLUE;
		}break;
		}
	STRING_LITERAL_GLUE_5:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(lexem_length);

				goto STRING_LITERAL_GLUE;
			}else{
					lexer->countChars(lexem_length);

				goto STRING_LITERAL_GLUE;
			}
		}break;
		case 32:case 9:{
		data++;
		goto STRING_LITERAL_GLUE_6;
		}break;
		default:{
				lexer->countChars(lexem_length);

			goto STRING_LITERAL_GLUE;
		}break;
		}
	STRING_LITERAL_GLUE_6:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(lexem_length);

				goto STRING_LITERAL_GLUE;
			}else{
					lexer->countChars(lexem_length);

				goto STRING_LITERAL_GLUE;
			}
		}break;
		case 32:case 9:{
		data++;
		goto STRING_LITERAL_GLUE_6;
		}break;
		default:{
				lexer->countChars(lexem_length);

			goto STRING_LITERAL_GLUE;
		}break;
		}
	STRING_LITERAL_GLUE_7:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->endBuffer(Token::StringLiteral);
					LEXX_UNPUT(1);
					LEXX_GOTO(INITIAL);

				goto STRING_LITERAL_GLUE;
			}else{
					lexer->endBuffer(Token::StringLiteral);
					LEXX_UNPUT(1);
					LEXX_GOTO(INITIAL);

				goto STRING_LITERAL_GLUE;
			}
		}break;
		case 13:{
		data++;
		goto STRING_LITERAL_GLUE_8;
		}break;
		default:{
				lexer->endBuffer(Token::StringLiteral);
				LEXX_UNPUT(1);
				LEXX_GOTO(INITIAL);

			goto STRING_LITERAL_GLUE;
		}break;
		}
	STRING_LITERAL_GLUE_8:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countNewline();

				goto STRING_LITERAL_GLUE;
			}else{
					lexer->countNewline();

				goto STRING_LITERAL_GLUE;
			}
		}break;
		default:{
				lexer->countNewline();

			goto STRING_LITERAL_GLUE;
		}break;
		}
	INITIAL:
	lexem_start = data;
	goto INITIAL_5;
	INITIAL_1:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Then)

				goto INITIAL;
			}else{
					KWD(Then)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Then)

			goto INITIAL;
		}break;
		}
	INITIAL_2:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 117:{
		data++;
		goto INITIAL_217;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_3:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_27;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_4:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Repeat)

				goto INITIAL;
			}else{
					KWD(Repeat)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Repeat)

			goto INITIAL;
		}break;
		}
	INITIAL_5:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				return;
			}else{
				data++;
				LEXX_CONSUME_UNEXPECTED;
				goto INITIAL;
			}
		}break;
		case 100:{
		data++;
		goto INITIAL_69;
		}break;
		case 117:{
		data++;
		goto INITIAL_235;
		}break;
		case 99:{
		data++;
		goto INITIAL_29;
		}break;
		case 60:{
		data++;
		goto INITIAL_92;
		}break;
		case 9:case 32:{
		data++;
		goto INITIAL_7;
		}break;
		case 123:{
		data++;
		goto INITIAL_218;
		}break;
		case 95:{
		data++;
		goto INITIAL_77;
		}break;
		case 91:{
		data++;
		goto INITIAL_117;
		}break;
		case 118:{
		data++;
		goto INITIAL_79;
		}break;
		case 10:{
		data++;
		goto INITIAL_10;
		}break;
		case 98:{
		data++;
		goto INITIAL_78;
		}break;
		case 115:{
		data++;
		goto INITIAL_17;
		}break;
		case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_83;
		}break;
		case 34:{
		data++;
		goto INITIAL_18;
		}break;
		case 116:{
		data++;
		goto INITIAL_152;
		}break;
		case 58:{
		data++;
		goto INITIAL_88;
		}break;
		case 125:{
		data++;
		goto INITIAL_154;
		}break;
		case 40:{
		data++;
		goto INITIAL_131;
		}break;
		case 13:{
		data++;
		goto INITIAL_16;
		}break;
		case 41:{
		data++;
		goto INITIAL_141;
		}break;
		case 42:{
		data++;
		goto INITIAL_151;
		}break;
		case 43:{
		data++;
		goto INITIAL_163;
		}break;
		case 102:{
		data++;
		goto INITIAL_176;
		}break;
		case 44:{
		data++;
		goto INITIAL_173;
		}break;
		case 110:{
		data++;
		goto INITIAL_208;
		}break;
		case 45:{
		data++;
		goto INITIAL_32;
		}break;
		case 111:{
		data++;
		goto INITIAL_236;
		}break;
		case 103:{
		data++;
		goto INITIAL_193;
		}break;
		case 124:{
		data++;
		goto INITIAL_93;
		}break;
		case 62:{
		data++;
		goto INITIAL_107;
		}break;
		case 63:{
		data++;
		goto INITIAL_111;
		}break;
		case 101:{
		data++;
		goto INITIAL_201;
		}break;
		case 46:{
		data++;
		goto INITIAL_225;
		}break;
		case 114:{
		data++;
		goto INITIAL_227;
		}break;
		case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 104:case 106:case 107:case 112:case 113:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 61:{
		data++;
		goto INITIAL_100;
		}break;
		case 47:{
		data++;
		goto INITIAL_247;
		}break;
		case 48:{
		data++;
		goto INITIAL_9;
		}break;
		case 37:{
		data++;
		goto INITIAL_20;
		}break;
		case 93:{
		data++;
		goto INITIAL_121;
		}break;
		case 109:{
		data++;
		goto INITIAL_172;
		}break;
		case 108:{
		data++;
		goto INITIAL_143;
		}break;
		case 96:{
		data++;
		goto INITIAL_125;
		}break;
		case 97:{
		data++;
		goto INITIAL_127;
		}break;
		case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto INITIAL_11;
		}break;
		case 105:{
		data++;
		goto INITIAL_23;
		}break;
		case 59:{
		data++;
		goto INITIAL_90;
		}break;
		case 119:{
		data++;
		goto INITIAL_248;
		}break;
		default:{
			data++;
			LEXX_CONSUME_UNEXPECTED;
			goto INITIAL;
		}break;
		}
	INITIAL_6:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(ElseIf)

				goto INITIAL;
			}else{
					KWD(ElseIf)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(ElseIf)

			goto INITIAL;
		}break;
		}
	INITIAL_7:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(lexem_length);

				goto INITIAL;
			}else{
					lexer->countChars(lexem_length);

				goto INITIAL;
			}
		}break;
		case 32:case 9:{
		data++;
		goto INITIAL_7;
		}break;
		default:{
				lexer->countChars(lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_8:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(And)

				goto INITIAL;
			}else{
					KWD(And)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(And)

			goto INITIAL;
		}break;
		}
	INITIAL_9:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_34;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_72;
		}break;
		case 65:case 66:case 67:case 68:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_77;
		}break;
		case 46:{
		data++;
		goto INITIAL_56;
		}break;
		case 69:case 101:{
		data++;
		goto INITIAL_80;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_10:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto INITIAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto INITIAL;
			}
		}break;
		case 13:{
		data++;
		goto INITIAL_13;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto INITIAL;
		}break;
		}
	INITIAL_11:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto INITIAL_11;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_12:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Field)

				goto INITIAL;
			}else{
					KWD(Field)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Field)

			goto INITIAL;
		}break;
		}
	INITIAL_13:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countNewline();

				goto INITIAL;
			}else{
					lexer->countNewline();

				goto INITIAL;
			}
		}break;
		default:{
				lexer->countNewline();

			goto INITIAL;
		}break;
		}
	INITIAL_14:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 100:{
		data++;
		goto INITIAL_12;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_15:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Until)

				goto INITIAL;
			}else{
					KWD(Until)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Until)

			goto INITIAL;
		}break;
		}
	INITIAL_16:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countNewline();

				goto INITIAL;
			}else{
					lexer->countNewline();

				goto INITIAL;
			}
		}break;
		case 10:{
		data++;
		goto INITIAL_13;
		}break;
		default:{
				lexer->countNewline();

			goto INITIAL;
		}break;
		}
	INITIAL_17:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_133;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_18:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->beginBuffer();
					lexer->countChars(1);
					LEXX_GOTO(STRING_LITERAL);

				goto INITIAL;
			}else{
					lexer->beginBuffer();
					lexer->countChars(1);
					LEXX_GOTO(STRING_LITERAL);

				goto INITIAL;
			}
		}break;
		default:{
				lexer->beginBuffer();
				lexer->countChars(1);
				LEXX_GOTO(STRING_LITERAL);

			goto INITIAL;
		}break;
		}
	INITIAL_19:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 117:{
		data++;
		goto INITIAL_45;
		}break;
		case 100:{
		data++;
		goto INITIAL_30;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_20:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Rem)

				goto INITIAL;
			}else{
					OP(Rem)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Rem)

			goto INITIAL;
		}break;
		}
	INITIAL_21:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_68;
		}break;
		case 112:{
		data++;
		goto INITIAL_84;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_22:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_24;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_23:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 109:{
		data++;
		goto INITIAL_94;
		}break;
		case 102:{
		data++;
		goto INITIAL_250;
		}break;
		case 110:{
		data++;
		goto INITIAL_198;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_24:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_26;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_25:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Function)

				goto INITIAL;
			}else{
					KWD(Function)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Function)

			goto INITIAL;
		}break;
		}
	INITIAL_26:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_28;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_27:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Abstract)

				goto INITIAL;
			}else{
					KWD(Abstract)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Abstract)

			goto INITIAL;
		}break;
		}
	INITIAL_28:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Bytes)

				goto INITIAL;
			}else{
					KWD(Bytes)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Bytes)

			goto INITIAL;
		}break;
		}
	INITIAL_29:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_212;
		}break;
		case 97:{
		data++;
		goto INITIAL_182;
		}break;
		case 111:{
		data++;
		goto INITIAL_48;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_30:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(End)

				goto INITIAL;
			}else{
					KWD(End)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(End)

			goto INITIAL;
		}break;
		}
	INITIAL_31:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_97;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_32:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Minus)

				goto INITIAL;
			}else{
					OP(Minus)

				goto INITIAL;
			}
		}break;
		case 62:{
		data++;
		goto INITIAL_39;
		}break;
		case 45:{
		data++;
		goto INITIAL_37;
		}break;
		default:{
				OP(Minus)

			goto INITIAL;
		}break;
		}
	INITIAL_33:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_204;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_34:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_34;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_35:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_138;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_36:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_102;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_37:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					;

				goto INITIAL;
			}else{
				data++;
				goto INITIAL_37;
			}
		}break;
		case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 11:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 92:case 93:case 94:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 126:case 127:case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto INITIAL_37;
		}break;
		default:{
				;

			goto INITIAL;
		}break;
		}
	INITIAL_38:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_104;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_39:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Arrow)

				goto INITIAL;
			}else{
					OP(Arrow)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Arrow)

			goto INITIAL;
		}break;
		}
	INITIAL_40:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 100:{
		data++;
		goto INITIAL_8;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_41:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_234;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_42:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Import)

				goto INITIAL;
			}else{
					KWD(Import)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Import)

			goto INITIAL;
		}break;
		}
	INITIAL_43:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_108;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_44:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Concat)

				goto INITIAL;
			}else{
					OP(Concat)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Concat)

			goto INITIAL;
		}break;
		}
	INITIAL_45:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 109:{
		data++;
		goto INITIAL_58;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_46:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Class)

				goto INITIAL;
			}else{
					KWD(Class)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Class)

			goto INITIAL;
		}break;
		}
	INITIAL_47:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(String)

				goto INITIAL;
			}else{
					KWD(String)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(String)

			goto INITIAL;
		}break;
		}
	INITIAL_48:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_51;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_49:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_57;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_50:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_31;
		}break;
		case 116:{
		data++;
		goto INITIAL_156;
		}break;
		case 100:{
		data++;
		goto INITIAL_114;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_51:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_53;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_52:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_237;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_53:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_49;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_54:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_191;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_55:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_36;
		}break;
		case 108:{
		data++;
		goto INITIAL_128;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_56:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 101:case 69:{
		data++;
		goto INITIAL_62;
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_34;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_74;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_57:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 117:{
		data++;
		goto INITIAL_59;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_58:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Enum)

				goto INITIAL;
			}else{
					KWD(Enum)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Enum)

			goto INITIAL;
		}break;
		}
	INITIAL_59:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 99:{
		data++;
		goto INITIAL_61;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_60:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_126;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_61:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_64;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_62:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 43:case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_34;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_63:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_164;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_64:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Construct)

				goto INITIAL;
			}else{
					KWD(Construct)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_65;
		}break;
		default:{
				KWD(Construct)

			goto INITIAL;
		}break;
		}
	INITIAL_65:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_67;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_66:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(As)

				goto INITIAL;
			}else{
					KWD(As)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(As)

			goto INITIAL;
		}break;
		}
	INITIAL_67:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Constructor)

				goto INITIAL;
			}else{
					KWD(Constructor)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Constructor)

			goto INITIAL;
		}break;
		}
	INITIAL_68:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 117:{
		data++;
		goto INITIAL_134;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_69:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_148;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_70:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_82;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_71:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_187;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_72:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_34;
		}break;
		case 46:{
		data++;
		goto INITIAL_73;
		}break;
		case 65:case 66:case 67:case 68:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_77;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_72;
		}break;
		case 69:case 101:{
		data++;
		goto INITIAL_80;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_73:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 101:case 69:{
		data++;
		goto INITIAL_62;
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_34;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_73;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_74:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 101:case 69:{
		data++;
		goto INITIAL_86;
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_34;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_74;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_75:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_179;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_76:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_54;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_77:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;
				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;
				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_77;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;
			goto INITIAL;
		}break;
		}
	INITIAL_78:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 121:{
		data++;
		goto INITIAL_22;
		}break;
		case 111:{
		data++;
		goto INITIAL_91;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_79:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_142;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_80:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_34;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_81;
		}break;
		case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_77;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_81:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_81;
		}break;
		case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_77;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_82:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_96;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_83:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_34;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_83;
		}break;
		case 65:case 66:case 67:case 68:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_77;
		}break;
		case 46:{
		data++;
		goto INITIAL_56;
		}break;
		case 69:case 101:{
		data++;
		goto INITIAL_80;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_84:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_146;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_85:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_231;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_86:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_113;
		}break;
		case 43:case 45:{
		data++;
		goto INITIAL_101;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_87:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 109:{
		data++;
		goto INITIAL_170;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_88:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Colon)

				goto INITIAL;
			}else{
					OP(Colon)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Colon)

			goto INITIAL;
		}break;
		}
	INITIAL_89:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Int)

				goto INITIAL;
			}else{
					KWD(Int)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_52;
		}break;
		default:{
				KWD(Int)

			goto INITIAL;
		}break;
		}
	INITIAL_90:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Semicolon)

				goto INITIAL;
			}else{
					OP(Semicolon)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Semicolon)

			goto INITIAL;
		}break;
		}
	INITIAL_91:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_106;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_92:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(LT)

				goto INITIAL;
			}else{
					OP(LT)

				goto INITIAL;
			}
		}break;
		case 61:{
		data++;
		goto INITIAL_95;
		}break;
		case 62:{
		data++;
		goto INITIAL_98;
		}break;
		default:{
				OP(LT)

			goto INITIAL;
		}break;
		}
	INITIAL_93:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(VBar)

				goto INITIAL;
			}else{
					OP(VBar)

				goto INITIAL;
			}
		}break;
		default:{
				OP(VBar)

			goto INITIAL;
		}break;
		}
	INITIAL_94:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 112:{
		data++;
		goto INITIAL_55;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_95:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(LE)

				goto INITIAL;
			}else{
					OP(LE)

				goto INITIAL;
			}
		}break;
		default:{
				OP(LE)

			goto INITIAL;
		}break;
		}
	INITIAL_96:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Eval)

				goto INITIAL;
			}else{
					KWD(Eval)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Eval)

			goto INITIAL;
		}break;
		}
	INITIAL_97:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Unit)

				goto INITIAL;
			}else{
					KWD(Unit)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Unit)

			goto INITIAL;
		}break;
		}
	INITIAL_98:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(NE)

				goto INITIAL;
			}else{
					OP(NE)

				goto INITIAL;
			}
		}break;
		default:{
				OP(NE)

			goto INITIAL;
		}break;
		}
	INITIAL_99:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_140;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_100:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Assign)

				goto INITIAL;
			}else{
					OP(Assign)

				goto INITIAL;
			}
		}break;
		case 62:{
		data++;
		goto INITIAL_105;
		}break;
		case 61:{
		data++;
		goto INITIAL_103;
		}break;
		default:{
				OP(Assign)

			goto INITIAL;
		}break;
		}
	INITIAL_101:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}else{
					LEXX_CONSUME_UNEXPECTED;

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_113;
		}break;
		default:{
				LEXX_CONSUME_UNEXPECTED;

			goto INITIAL;
		}break;
		}
	INITIAL_102:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_42;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_103:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(EQ)

				goto INITIAL;
			}else{
					OP(EQ)

				goto INITIAL;
			}
		}break;
		default:{
				OP(EQ)

			goto INITIAL;
		}break;
		}
	INITIAL_104:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_161;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_105:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(BigArrow)

				goto INITIAL;
			}else{
					OP(BigArrow)

				goto INITIAL;
			}
		}break;
		default:{
				OP(BigArrow)

			goto INITIAL;
		}break;
		}
	INITIAL_106:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_118;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_107:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(GT)

				goto INITIAL;
			}else{
					OP(GT)

				goto INITIAL;
			}
		}break;
		case 61:{
		data++;
		goto INITIAL_109;
		}break;
		default:{
				OP(GT)

			goto INITIAL;
		}break;
		}
	INITIAL_108:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_165;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_109:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(GE)

				goto INITIAL;
			}else{
					OP(GE)

				goto INITIAL;
			}
		}break;
		default:{
				OP(GE)

			goto INITIAL;
		}break;
		}
	INITIAL_110:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_124;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_111:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Question)

				goto INITIAL;
			}else{
					OP(Question)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Question)

			goto INITIAL;
		}break;
		}
	INITIAL_112:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_113:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{
		data++;
		goto INITIAL_113;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::NumberLiteral, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_114:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_171;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_115:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_144;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_116:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_223;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_117:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(LBracket)

				goto INITIAL;
			}else{
					OP(LBracket)

				goto INITIAL;
			}
		}break;
		default:{
				OP(LBracket)

			goto INITIAL;
		}break;
		}
	INITIAL_118:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Bool)

				goto INITIAL;
			}else{
					KWD(Bool)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Bool)

			goto INITIAL;
		}break;
		}
	INITIAL_119:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_167;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_120:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Implements)

				goto INITIAL;
			}else{
					KWD(Implements)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Implements)

			goto INITIAL;
		}break;
		}
	INITIAL_121:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(RBracket)

				goto INITIAL;
			}else{
					OP(RBracket)

				goto INITIAL;
			}
		}break;
		default:{
				OP(RBracket)

			goto INITIAL;
		}break;
		}
	INITIAL_122:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_175;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_123:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Extends)

				goto INITIAL;
			}else{
					KWD(Extends)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Extends)

			goto INITIAL;
		}break;
		}
	INITIAL_124:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_115;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_125:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Quote)

				goto INITIAL;
			}else{
					OP(Quote)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Quote)

			goto INITIAL;
		}break;
		}
	INITIAL_126:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(For)

				goto INITIAL;
			}else{
					KWD(For)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(For)

			goto INITIAL;
		}break;
		}
	INITIAL_127:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_40;
		}break;
		case 98:{
		data++;
		goto INITIAL_129;
		}break;
		case 115:{
		data++;
		goto INITIAL_66;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_128:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_87;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_129:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_130;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_130:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_132;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_131:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(LParen)

				goto INITIAL;
			}else{
					OP(LParen)

				goto INITIAL;
			}
		}break;
		default:{
				OP(LParen)

			goto INITIAL;
		}break;
		}
	INITIAL_132:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_135;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_133:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_139;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_134:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_184;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_135:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_137;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_136:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(With)

				goto INITIAL;
			}else{
					KWD(With)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(With)

			goto INITIAL;
		}break;
		}
	INITIAL_137:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 99:{
		data++;
		goto INITIAL_3;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_138:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Global)

				goto INITIAL;
			}else{
					KWD(Global)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Global)

			goto INITIAL;
		}break;
		}
	INITIAL_139:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_224;
		}break;
		case 117:{
		data++;
		goto INITIAL_158;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_140:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Interface)

				goto INITIAL;
			}else{
					KWD(Interface)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Interface)

			goto INITIAL;
		}break;
		}
	INITIAL_141:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(RParen)

				goto INITIAL;
			}else{
					OP(RParen)

				goto INITIAL;
			}
		}break;
		default:{
				OP(RParen)

			goto INITIAL;
		}break;
		}
	INITIAL_142:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_194;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_143:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_147;
		}break;
		case 101:{
		data++;
		goto INITIAL_166;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_144:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 100:{
		data++;
		goto INITIAL_155;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_145:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Struct)

				goto INITIAL;
			}else{
					KWD(Struct)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Struct)

			goto INITIAL;
		}break;
		}
	INITIAL_146:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_199;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_147:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 109:{
		data++;
		goto INITIAL_149;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_148:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Do)

				goto INITIAL;
			}else{
					KWD(Do)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 117:{
		data++;
		goto INITIAL_159;
		}break;
		default:{
				KWD(Do)

			goto INITIAL;
		}break;
		}
	INITIAL_149:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 98:{
		data++;
		goto INITIAL_153;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_150:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_203;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_151:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Mult)

				goto INITIAL;
			}else{
					OP(Mult)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Mult)

			goto INITIAL;
		}break;
		}
	INITIAL_152:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_2;
		}break;
		case 104:{
		data++;
		goto INITIAL_119;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_153:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 100:{
		data++;
		goto INITIAL_157;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_154:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(RBrace)

				goto INITIAL;
			}else{
					OP(RBrace)

				goto INITIAL;
			}
		}break;
		default:{
				OP(RBrace)

			goto INITIAL;
		}break;
		}
	INITIAL_155:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_123;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_156:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_207;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_157:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_160;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_158:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 99:{
		data++;
		goto INITIAL_213;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_159:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 98:{
		data++;
		goto INITIAL_75;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_160:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Lambda)

				goto INITIAL;
			}else{
					KWD(Lambda)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Lambda)

			goto INITIAL;
		}break;
		}
	INITIAL_161:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_210;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_162:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_200;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_163:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Plus)

				goto INITIAL;
			}else{
					OP(Plus)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Plus)

			goto INITIAL;
		}break;
		}
	INITIAL_164:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_180;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_165:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_214;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_166:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_169;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_167:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_1;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_168:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(2);
					LEXX_GOTO(COMMENT);
					 

				goto INITIAL;
			}else{
					lexer->countChars(2);
					LEXX_GOTO(COMMENT);
					 

				goto INITIAL;
			}
		}break;
		default:{
				lexer->countChars(2);
				LEXX_GOTO(COMMENT);
				 

			goto INITIAL;
		}break;
		}
	INITIAL_169:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Let)

				goto INITIAL;
			}else{
					KWD(Let)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Let)

			goto INITIAL;
		}break;
		}
	INITIAL_170:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_71;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_171:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 102:{
		data++;
		goto INITIAL_221;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_172:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_188;
		}break;
		case 97:{
		data++;
		goto INITIAL_174;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_173:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Comma)

				goto INITIAL;
			}else{
					OP(Comma)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Comma)

			goto INITIAL;
		}break;
		}
	INITIAL_174:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_177;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_175:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Override)

				goto INITIAL;
			}else{
					KWD(Override)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Override)

			goto INITIAL;
		}break;
		}
	INITIAL_176:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 117:{
		data++;
		goto INITIAL_178;
		}break;
		case 97:{
		data++;
		goto INITIAL_186;
		}break;
		case 108:{
		data++;
		goto INITIAL_76;
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_228;
		}break;
		case 111:{
		data++;
		goto INITIAL_60;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_177:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 99:{
		data++;
		goto INITIAL_181;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_178:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_229;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_179:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_190;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_180:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_232;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_181:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 104:{
		data++;
		goto INITIAL_185;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_182:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_33;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_183:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 100:{
		data++;
		goto INITIAL_202;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_184:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_238;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_185:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Match)

				goto INITIAL;
			}else{
					KWD(Match)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Match)

			goto INITIAL;
		}break;
		}
	INITIAL_186:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_196;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_187:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_220;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_188:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_192;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_189:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 103:{
		data++;
		goto INITIAL_47;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_190:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Double)

				goto INITIAL;
			}else{
					KWD(Double)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Double)

			goto INITIAL;
		}break;
		}
	INITIAL_191:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_245;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_192:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 104:{
		data++;
		goto INITIAL_195;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_193:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_150;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_194:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Var)

				goto INITIAL;
			}else{
					KWD(Var)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Var)

			goto INITIAL;
		}break;
		}
	INITIAL_195:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 111:{
		data++;
		goto INITIAL_183;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_196:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_206;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_197:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(True)

				goto INITIAL;
			}else{
					KWD(True)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(True)

			goto INITIAL;
		}break;
		}
	INITIAL_198:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(In)

				goto INITIAL;
			}else{
					KWD(In)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_89;
		}break;
		default:{
				KWD(In)

			goto INITIAL;
		}break;
		}
	INITIAL_199:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_4;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_200:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 104:{
		data++;
		goto INITIAL_136;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_201:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 119:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_19;
		}break;
		case 120:{
		data++;
		goto INITIAL_110;
		}break;
		case 108:{
		data++;
		goto INITIAL_209;
		}break;
		case 118:{
		data++;
		goto INITIAL_70;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_202:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Method)

				goto INITIAL;
			}else{
					KWD(Method)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Method)

			goto INITIAL;
		}break;
		}
	INITIAL_203:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 98:{
		data++;
		goto INITIAL_240;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_204:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Case)

				goto INITIAL;
			}else{
					KWD(Case)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Case)

			goto INITIAL;
		}break;
		}
	INITIAL_205:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 119:{
		data++;
		goto INITIAL_211;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_206:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_216;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_207:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_15;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_208:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 112:case 113:case 114:case 115:case 116:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_205;
		}break;
		case 111:{
		data++;
		goto INITIAL_215;
		}break;
		case 117:{
		data++;
		goto INITIAL_222;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_209:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_85;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_210:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Raise)

				goto INITIAL;
			}else{
					KWD(Raise)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Raise)

			goto INITIAL;
		}break;
		}
	INITIAL_211:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(New)

				goto INITIAL;
			}else{
					KWD(New)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(New)

			goto INITIAL;
		}break;
		}
	INITIAL_212:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_41;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_213:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_145;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_214:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_25;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_215:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 116:{
		data++;
		goto INITIAL_219;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_216:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(False)

				goto INITIAL;
			}else{
					KWD(False)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(False)

			goto INITIAL;
		}break;
		}
	INITIAL_217:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_197;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_218:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(LBrace)

				goto INITIAL;
			}else{
					OP(LBrace)

				goto INITIAL;
			}
		}break;
		case 45:{
		data++;
		goto INITIAL_168;
		}break;
		default:{
				OP(LBrace)

			goto INITIAL;
		}break;
		}
	INITIAL_219:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Not)

				goto INITIAL;
			}else{
					KWD(Not)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Not)

			goto INITIAL;
		}break;
		}
	INITIAL_220:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_120;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_221:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Undef)

				goto INITIAL;
			}else{
					KWD(Undef)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Undef)

			goto INITIAL;
		}break;
		}
	INITIAL_222:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_226;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_223:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 99:{
		data++;
		goto INITIAL_99;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_224:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_189;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_225:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Period)

				goto INITIAL;
			}else{
					OP(Period)

				goto INITIAL;
			}
		}break;
		case 46:{
		data++;
		goto INITIAL_44;
		}break;
		default:{
				OP(Period)

			goto INITIAL;
		}break;
		}
	INITIAL_226:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_230;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_227:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_38;
		}break;
		case 101:{
		data++;
		goto INITIAL_21;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_228:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_239;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_229:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 99:{
		data++;
		goto INITIAL_43;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_230:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Null)

				goto INITIAL;
			}else{
					KWD(Null)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Null)

			goto INITIAL;
		}break;
		}
	INITIAL_231:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Else)

				goto INITIAL;
			}else{
					KWD(Else)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_243;
		}break;
		default:{
				KWD(Else)

			goto INITIAL;
		}break;
		}
	INITIAL_232:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(While)

				goto INITIAL;
			}else{
					KWD(While)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(While)

			goto INITIAL;
		}break;
		}
	INITIAL_233:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Or)

				goto INITIAL;
			}else{
					KWD(Or)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Or)

			goto INITIAL;
		}break;
		}
	INITIAL_234:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 115:{
		data++;
		goto INITIAL_46;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_235:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 110:{
		data++;
		goto INITIAL_50;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_236:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_233;
		}break;
		case 118:{
		data++;
		goto INITIAL_241;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_237:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 102:{
		data++;
		goto INITIAL_116;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_238:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Return)

				goto INITIAL;
			}else{
					KWD(Return)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Return)

			goto INITIAL;
		}break;
		}
	INITIAL_239:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 108:{
		data++;
		goto INITIAL_14;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_240:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 97:{
		data++;
		goto INITIAL_35;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_241:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 101:{
		data++;
		goto INITIAL_242;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_242:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_244;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_243:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 102:{
		data++;
		goto INITIAL_6;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_244:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 114:{
		data++;
		goto INITIAL_246;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_245:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(Float)

				goto INITIAL;
			}else{
					KWD(Float)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(Float)

			goto INITIAL;
		}break;
		}
	INITIAL_246:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_249;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_247:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					OP(Div)

				goto INITIAL;
			}else{
					OP(Div)

				goto INITIAL;
			}
		}break;
		default:{
				OP(Div)

			goto INITIAL;
		}break;
		}
	INITIAL_248:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 105:{
		data++;
		goto INITIAL_162;
		}break;
		case 104:{
		data++;
		goto INITIAL_63;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_249:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}else{
					lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		case 100:{
		data++;
		goto INITIAL_122;
		}break;
		default:{
				lexer->countAndCopyASCII(Token::Identifier, lexem_start, lexem_length);

			goto INITIAL;
		}break;
		}
	INITIAL_250:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					KWD(If)

				goto INITIAL;
			}else{
					KWD(If)

				goto INITIAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:{
		data++;
		goto INITIAL_112;
		}break;
		default:{
				KWD(If)

			goto INITIAL;
		}break;
		}
	STRING_LITERAL:
	lexem_start = data;
	goto STRING_LITERAL_15;
	STRING_LITERAL_1:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(2);
					lexer->bufferUTF8('\n');

				goto STRING_LITERAL;
			}else{
					lexer->countChars(2);
					lexer->bufferUTF8('\n');

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(2);
				lexer->bufferUTF8('\n');

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_2:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(6);
					lexer->bufferUTF8FromHex(lexem_start + 2, 4);

				goto STRING_LITERAL;
			}else{
					lexer->countChars(6);
					lexer->bufferUTF8FromHex(lexem_start + 2, 4);

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(6);
				lexer->bufferUTF8FromHex(lexem_start + 2, 4);

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_3:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_2;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_4:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_26;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_5:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 110:{
		data++;
		goto STRING_LITERAL_1;
		}break;
		case 117:{
		data++;
		goto STRING_LITERAL_20;
		}break;
		case 120:{
		data++;
		goto STRING_LITERAL_19;
		}break;
		case 92:{
		data++;
		goto STRING_LITERAL_17;
		}break;
		case 85:{
		data++;
		goto STRING_LITERAL_12;
		}break;
		case 116:{
		data++;
		goto STRING_LITERAL_21;
		}break;
		case 34:{
		data++;
		goto STRING_LITERAL_13;
		}break;
		case 114:{
		data++;
		goto STRING_LITERAL_18;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_6:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(1);
					LEXX_GOTO(STRING_LITERAL_GLUE);

				goto STRING_LITERAL;
			}else{
					lexer->countChars(1);
					LEXX_GOTO(STRING_LITERAL_GLUE);

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(1);
				LEXX_GOTO(STRING_LITERAL_GLUE);

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_7:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_9;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_8:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_23;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_9:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_8;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_10:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_11;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_11:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(10);
					lexer->bufferUTF8FromHex(lexem_start + 2, 8);

				goto STRING_LITERAL;
			}else{
					lexer->countChars(10);
					lexer->bufferUTF8FromHex(lexem_start + 2, 8);

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(10);
				lexer->bufferUTF8FromHex(lexem_start + 2, 8);

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_12:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_16;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_13:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(2);
					lexer->bufferUTF8('"');

				goto STRING_LITERAL;
			}else{
					lexer->countChars(2);
					lexer->bufferUTF8('"');

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(2);
				lexer->bufferUTF8('"');

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_14:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_7;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_15:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->reportHere(LexerError::UnterminatedStringLiteral);
					lexer->endBuffer(Token::StringLiteral);

				return;
			}else{
				data++;
				goto STRING_LITERAL_22;
			}
		}break;
		case 34:{
		data++;
		goto STRING_LITERAL_6;
		}break;
		case 92:{
		data++;
		goto STRING_LITERAL_5;
		}break;
		case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 93:case 94:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 126:case 127:case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto STRING_LITERAL_22;
		}break;
		}
	STRING_LITERAL_16:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_14;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_17:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(2);
					lexer->bufferUTF8('\\');

				goto STRING_LITERAL;
			}else{
					lexer->countChars(2);
					lexer->bufferUTF8('\\');

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(2);
				lexer->bufferUTF8('\\');

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_18:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(2);
					lexer->bufferUTF8('\r');

				goto STRING_LITERAL;
			}else{
					lexer->countChars(2);
					lexer->bufferUTF8('\r');

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(2);
				lexer->bufferUTF8('\r');

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_19:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_4;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_20:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_25;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_21:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(2);
					lexer->bufferUTF8('\t');

				goto STRING_LITERAL;
			}else{
					lexer->countChars(2);
					lexer->bufferUTF8('\t');

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(2);
				lexer->bufferUTF8('\t');

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_22:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->bufferCodepoints(lexem_start, lexem_length);

				goto STRING_LITERAL;
			}else{
				data++;
				goto STRING_LITERAL_22;
			}
		}break;
		case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 93:case 94:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 126:case 127:case 128:case 129:case 130:case 131:case 132:case 133:case 134:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 142:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 150:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 158:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 166:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 174:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 182:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 190:case 191:case 192:case 193:case 194:case 195:case 196:case 197:case 198:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 206:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 214:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 246:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 254:case 255:{
		data++;
		goto STRING_LITERAL_22;
		}break;
		default:{
				lexer->bufferCodepoints(lexem_start, lexem_length);

			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_23:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_10;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_24:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_3;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_25:
		switch(*data){
		case 0:{
			if ( data == data_end ){
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}else{
				LEXX_CONSUME_UNEXPECTED;
				goto STRING_LITERAL;
			}
		}break;
		case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:{
		data++;
		goto STRING_LITERAL_24;
		}break;
		default:{
			LEXX_CONSUME_UNEXPECTED;
			goto STRING_LITERAL;
		}break;
		}
	STRING_LITERAL_26:
		switch(*data){
		case 0:{
			if ( data == data_end ){
					lexer->countChars(4);
					lexer->bufferUTF8FromHex(lexem_start + 2, 2);

				goto STRING_LITERAL;
			}else{
					lexer->countChars(4);
					lexer->bufferUTF8FromHex(lexem_start + 2, 2);

				goto STRING_LITERAL;
			}
		}break;
		default:{
				lexer->countChars(4);
				lexer->bufferUTF8FromHex(lexem_start + 2, 2);

			goto STRING_LITERAL;
		}break;
		}
}
