tokens:
	import KImport
	function KFunction
	global KGlobal
	interface KInterface
	struct KStruct
	class KClass
	enum KEnum
	as KAs

	if KIf
	then KThen
	else KElse
	elseif KElseIf
	end KEnd
	for KFor
	while KWhile
	do KDo
	in KIn
	var KVar
	let KLet
	return KReturn
	eval KEval
	raise KRaise
	match KMatch
	with KWith
	case KCase

	unit KUnit
	undef KUndef
	bool KBool
	int KInt
	float KFloat
	double KDouble
	string KString
	bytes KBytes

	true KTrue
	false KFalse
	null KNull

	or KOr
	and KAnd
	not KNot

	. OPeriod
	colon OColon
	( OLParen
	) ORParen 
	{ OLBrace
	} ORBrace
	< OLT
	> OGT
	<= OLE
	>= OGE
	== OEQ
	<> ONE
	+ OPlus
	- OMinus
	* OMult
	/ ODiv
	% ORem
	; OSemicolon
	arrow OArrow
	vbar OVBar
	, OComma
	= OAssign
	? OQuestion
	` OQuote

	identifier Identifier
	number NumberLiteral
	"string" StringLiteral
	 
types:
	Module : Module*
	Import : Import*
	Imports : List<Import>
	TopLevels : List<TopLevel>
	TopLevel : TopLevel*
	QualID2 QualID : QualID*
	SrcMarker : SrcLoc
	ImportAs : StringRef
	FunctionSignature : FunctionSignature*
	FunctionBody : FunctionBody*
	Names : List<Name>
	Pattern : Pattern*
	PatternList : List<Pattern>
	ParamGroups : List<ParamGroup>
	ParamGroup : ParamGroup*
	ElseExpr Expr : Expr*
	ExprList1 ExprList : List<ExprList>
	TypeUnion TypeList TypeList2 : List<TypeList>
	TypeReference : WithSrcLoc<TypeReferenceNode*>
	StmtCase : MatchCase<Stmt>*
	StmtCaseElseBranches StmtCaseBranches : MatchBranch<Stmt>*
	StmtCases : List< MatchCase<Stmt> >

	ExprCase : MatchCase<Expr>*
	ExprCaseElseBranches ExprCaseBranches : MatchBranch<Expr>*
	ExprCases : List< MatchCase<Expr> >

	Type : Type*
	Stmt : Stmt*
	CountVBars1 : int
	EnumCons : EnumConstructor 
	Stmts : List<Stmt>
	{{ }} : <null>
	
names:
	type TypePrim : NonTerminal.Type
	expr ExprPrim : NonTerminal.Expression
	pattern : NonTerminal.Pattern

Module :
	Imports TopLevels EndOfFile => alloc(Module)($1)

TopLevels :
	TopLevels TopLevel => $1.append($2)
	<e> => List<TopLevel>()
	
TopLevel :
	function identifier FunctionSignature {{FunctionBody}} => alloc(GlobalFunction)($2.where, sym($2), $3, $4)
	global Names TypeBinding {{Initializer}} => alloc(GlobalVariable)($2, $3, $4)

TypeBinding :
	colon Type => $2

Initializer :
	= Expr => $2

TypeList :
	TypeList' 
	<e> => List<TypeList>()

TypeList' :
	TypeList' , Type => $1.append(alloc(TypeList)($3))
	Type => alloc(TypeList)($1)

TypeList2 :
	TypeList2 , Type => $1.append(alloc(TypeList)($3))
	Type , Type => List<TypeList>(alloc(TypeList)($1)).append(alloc(TypeList)($3))
 
Type :
	type(0)

Expr :
	expr(0,0,1)
	 
type(prec) :
	prec == 0  | TypeUnion => alloc(TypeUnion)(SrcSpan($1.first->type->where.from(), $1.last->type->where.to()), $1)
	prec == 7  | type(prec) ? => alloc(TypeOptional)(SrcSpan($1->where.from(), $2.where.to()), $1)
	prec == 5  | type(prec+1) arrow type(prec) => alloc(TypeFunction)(SrcSpan($1->where, $3->where), alloc(TypeList)($1), $3)
	prec == 5  | ( ) arrow type(prec) => alloc(TypeFunction)(SrcSpan($1.where, $4->where), nullptr, $4)
	prec == 5  | ( TypeList2 ) arrow type(prec) => alloc(TypeFunction)(SrcSpan($1.where, $5->where), $2, $5)
	prec == 10 | TypePrim
	prec == 10 | ( Type ) => $2
	prec < 10  | type(prec+1)

TypeUnion :
	TypeUnion vbar type(1) => $1.append(alloc(TypeList)($3))
	type(1) vbar type(1) => List<TypeList>(alloc(TypeList)($1)).append(alloc(TypeList)($3))

TypePrim :
	unit => alloc(TypePrim)($1.where, TypePrim::Unit)
	undef => alloc(TypePrim)($1.where, TypePrim::Undef)
	bool => alloc(TypePrim)($1.where, TypePrim::Bool)
	int => alloc(TypePrim)($1.where, TypePrim::Int)
	float => alloc(TypePrim)($1.where, TypePrim::Float)
	double => alloc(TypePrim)($1.where, TypePrim::Double)
	string => alloc(TypePrim)($1.where, TypePrim::String)
	bytes => alloc(TypePrim)($1.where, TypePrim::Bytes)
	TypeReference => alloc(TypeReference)(to_here($1), $1)
	{ TypeList } => alloc(TypeTuple)(SrcSpan($1.where.from(), $3.where.to()), $2)

TypeReference :
	TypeReference . identifier => WithSrcLoc<TypeReferenceNode*>($1, alloc(TypeReferenceSubscript)($1, sym($3)))
	TypeReference . < TypeList > => WithSrcLoc<TypeReferenceNode*>($1, alloc(TypeReferenceInstance)($1, $4))
	TypeReference . <> => WithSrcLoc<TypeReferenceNode*>($1, alloc(TypeReferenceInstance)($1, List<TypeList>()))
	identifier => WithSrcLoc<TypeReferenceNode*>($1.where.from(), alloc(TypeReferenceLeaf)(sym($1)))

expr(prec,a,s) :
	prec == 0          | expr(prec,a,s) colon Type => alloc(ExprCoerce)(SrcSpan($1->where, $3->where), $1, $3)
	prec == 0          | expr(prec,a,s) or expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::Or, $1, $3)
	prec == 1          | expr(prec,a,s) and expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::And, $1, $3)
	prec == 2          | expr(prec+1,a,s) == expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::EQ, $1, $3)
	prec == 2          | expr(prec+1,a,s) <> expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::NE, $1, $3)
	prec == 2          | expr(prec+1,a,s) <= expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::LE, $1, $3)
	prec == 2          | expr(prec+1,a,s) >= expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::GE, $1, $3)
	prec == 2          | expr(prec+1,a,s) < expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::LT, $1, $3)
	prec == 2          | expr(prec+1,a,s) > expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::GT, $1, $3)
	prec == 3          | expr(prec,a,s) + expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::Plus, $1, $3)
	prec == 3          | expr(prec,a,s) - expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::Minus, $1, $3)
	prec == 4          | expr(prec,a,s) * expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::Mult, $1, $3)
	prec == 4          | expr(prec,a,s) / expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::Div, $1, $3)
	prec == 4          | expr(prec,a,s) % expr(prec+1,prec+1,2) => alloc(ExprBinOp)(SrcSpan($1->where.from(), $3->where.to()), ExprBinOp::Rem, $1, $3)
		
	prec == 9          | expr(prec,a,s) ( ExprList ) => alloc(ExprCall)(SrcSpan($2.where, $4.where), $1, $3)
	prec == 9          | expr(prec,a,s) . identifier => alloc(ExprSubscript)(SrcSpan($2.where, $3.where), $1, sym($3))
	prec == 9          | expr(prec,a,s) . < TypeList > => alloc(ExprInstance)(SrcSpan($2.where, $5.where), $1, $4)

	prec == 10 and s > 1 | if Expr then Expr ElseExpr => alloc(ExprIf)($1.where, $2, $4, $5)
	prec == 10 and s > 1 | match ExprList' with ExprCases end => alloc(ExprMatch)(SrcSpan($1.where, $5.where), $2, $4)

	prec == 10         | ExprPrim
	prec == 10 and s   | ( Expr ) => $2
	
	prec == 11 and s  | - expr('max(a,6)','max(a,6)',2) => alloc(ExprUnOp)(SrcSpan($1.where.from(), $2->where.to()), ExprUnOp::Negate, $2)
	prec == 11        | not expr('max(a,2)','max(a,2)',2) => alloc(ExprUnOp)(SrcSpan($1.where.from(), $2->where.to()), ExprUnOp::Not, $2)
	
	prec < 11          | expr(prec+1,a,s)

ExprCases :
	ExprCases ExprCase => $1.append($2)
	<e> => List< MatchCase<Expr> >()

ExprCase :
	case PatternList ExprCaseBranches => alloc(MatchCase<Expr>)($1.where, $2, $3)

ExprCaseBranches :
	then Expr => alloc(MatchBranch<Expr>)(nullptr, $2)
	if Expr then Expr ExprCaseElseBranches => alloc(MatchBranch<Expr>)($2, $4, $5)

ExprCaseElseBranches :
	elseif Expr then Expr ExprCaseElseBranches => alloc(MatchBranch<Expr>)($2, $4, $5) 
	else Expr => alloc(MatchBranch<Expr>)(nullptr, $2)
	<e> => nullptr
		 
ElseExpr : 
	else Expr end => $2
	elseif Expr then Expr ElseExpr => alloc(ExprIf)($1.where, $2, $4, $5)

ExprPrim :
	unit => alloc(ExprUnit)($1.where)
	true => alloc(ExprTrue)($1.where)
	false => alloc(ExprFalse)($1.where)
	null => alloc(ExprNull)($1.where)
	"string" => alloc(ExprString)($1.where, lit($1))
	number => alloc(ExprNumber)($1.where, sym($1))
	identifier => alloc(ExprID)($1.where, sym($1))
	{ ExprList } => alloc(ExprTuple)(SrcSpan($1.where, $3.where), $2)

ExprList :
	<e> => List<ExprList>()
	ExprList' => $1

ExprList' :
	ExprList , Expr => $1.append(alloc(ExprList)($3))
	Expr => alloc(ExprList)($1)

ExprList1(a) :
	ExprList1(a) , Expr => $1.append(alloc(ExprList)($3))
	expr(0,0,a) => alloc(ExprList)($1)

Names :
	Names identifier => $1.append(alloc(Name)($2.where, sym($2)))
	identifier => alloc(Name)($1.where, sym($1))

FunctionSignature :
	( ParamGroups ) MTypeBinder => alloc(FunctionSignature)(to_here($1.where.from()), $2, $4)

ParamGroups :
	<e> => nullptr
	ParamGroups' => $1

ParamGroups' :
	ParamGroups' , ParamGroup => $1.append($3)
	ParamGroup => List<ParamGroup>($1)

ParamGroup :
	Names colon Type => alloc(ParamGroup)($1, $3)
	Type => alloc(ParamGroup)(nullptr, $1)

MTypeBinder :
	<e> => nullptr
	colon Type => $2

MInitializer :
	<e> => nullptr
	Initializer

FunctionBody :
	import "string" => alloc(FunctionBodyImport)($2.where, lit($2))
	SrcMarker Stmts end => alloc(FunctionBodyDefined)(to_here($1), $2)

Stmts :
	Stmts' => $1
	<e> => List<Stmt>()

Stmts' :
	Stmts' Stmt(0) => $1.append($2)
	Stmts' ; => $1
	Stmt(1) => List<Stmt>($1)

Stmt(a) :
	raise Expr => alloc(StmtEval)($1.where, StmtEval::Raise, $2)
	return Expr => alloc(StmtEval)($1.where, StmtEval::Return, $2)
	eval Expr => alloc(StmtEval)($1.where, StmtEval::Eval, $2)
	expr(0,0,a) => alloc(StmtEval)($1->where, StmtEval::Naked, $1)
	ExprList1(a) = ExprList1(1) => alloc(StmtAssign)(SrcSpan($1.first->expr->where, $3.last->expr->where), $1, $3)
	if Expr then Stmts ElseStmt => alloc(StmtIf)($1.where, $2, $4, $5)
	while Expr do Stmts end => alloc(StmtWhile)($1.where, $2, $4)
	for Names in Expr do Stmts end => alloc(StmtFor)($1.where, $2, $4, $6)
	var Names Initializer => alloc(StmtVar)($1.where, $2, nullptr, $3)
	var Names colon Type MInitializer => alloc(StmtVar)($1.where, $2, $4, $5)
	var Names ; => alloc(StmtVar)($1.where, $2, nullptr, nullptr)
	let PatternList1 = ExprList1(1) => alloc(StmtLet)(SrcSpan($1.where, $4.last->expr->where), $2, $4)
	match ExprList' with StmtCases end => alloc(StmtMatch)(SrcSpan($1.where, $5.where), $2, $4)

StmtCases :
	StmtCases StmtCase => $1.append($2)
	<e> => List< MatchCase<Stmt> >()

StmtCase :
	case PatternList StmtCaseBranches => alloc(MatchCase<Stmt>)($1.where, $2, $3)

StmtCaseBranches :
	then Stmts => alloc(MatchBranch<Stmt>)(nullptr, $2)
	if Expr then Stmts StmtCaseElseBranches => alloc(MatchBranch<Stmt>)($2, $4, $5)

StmtCaseElseBranches :
	elseif Expr then Stmts StmtCaseElseBranches => alloc(MatchBranch<Stmt>)($2, $4, $5) 
	else Stmts => alloc(MatchBranch<Stmt>)(nullptr, $2)
	<e> => nullptr
	
ElseStmt :
	end => nullptr
	else Stmts end => $2
	elseif Expr then Stmts ElseStmt => alloc(StmtIf)($1.where, $2, $4, $5)

PatternList :
	PatternList1
	<e> => List<Pattern>()

PatternList1 :
	PatternList1 , Pattern => $1.append($3)
	Pattern => List<Pattern>($1)

Pattern :
	pattern(0)

pattern(prec):	
	prec == 0 | pattern(prec+1) as identifier => alloc(PatternRemember)($3.where, $1, sym($3))
	prec == 5 | identifier pattern(6) => alloc(PatternCons)(to_here($1.where.from()), alloc(QualID)($1.where, sym($1)), $2)
	prec == 5 | QualID2 MPattern6 => alloc(PatternCons)($1->where, $1, $2)
	prec == 5 | EnumCons MPattern6 => alloc(PatternEnum)($1.where, $1, $2)
	prec == 6 | unit => alloc(PatternPrim)($1.where, PatternPrim::Unit)
	prec == 6 | true => alloc(PatternPrim)($1.where, PatternPrim::True)
	prec == 6 | false => alloc(PatternPrim)($1.where, PatternPrim::False)
	prec == 6 | null => alloc(PatternPrim)($1.where, PatternPrim::Null)
	prec == 6 | * => alloc(PatternPrim)($1.where, PatternPrim::Wildcard)
	prec == 6 | identifier => alloc(PatternVar)($1.where, sym($1))
	prec == 6 | number => alloc(PatternNumber)($1.where, sym($1))
	prec == 6 | "string" => alloc(PatternString)($1.where, lit($1))
	prec == 6 | ` Expr ` => alloc(PatternQuote)($2->where, $2)
	prec == 6 | ( Pattern ) => $2
	prec == 6 | { PatternList } => alloc(PatternTuple)(SrcSpan($1.where, $3.where), $2)
	prec < 6  | pattern(prec+1)

MPattern6:
	<e> => nullptr
	pattern(6)

EnumCons:
	* CountVBars1 => EnumConstructor(to_here($1.where.from()), 0, $2)
	SrcMarker CountVBars1 * CountVBars => EnumConstructor(to_here($1), $2, $2 + $4)

CountVBars1 :
	CountVBars1 vbar => $1 + 1
	vbar => 1

CountVBars :
	<e> => 0
	CountVBars1

Imports :
	Imports Import => $1.append($2)
	<e> => List<Import>()

Import :
	SrcMarker import QualID ImportAs => alloc(Import)(to_here($1), $3, $4)

ImportAs :
	as identifier => sym($2)
	<e> => StringRef()

QualID :
	identifier => alloc(QualID)($1.where, sym($1))
	QualID . identifier => alloc(QualID)(jf::SrcSpan($1->where.from(), $3.where.to()), $1, sym($3))

QualID2 :
	identifier . identifier => alloc(QualID)(SrcSpan($1.where, $3.where), alloc(QualID)(SrcSpan($1.where), sym($1)), sym($3))
	QualID2 . identifier => alloc(QualID)(jf::SrcSpan($1->where.from(), $3.where.to()), $1, sym($3))


SrcMarker :
	=> parsx_next_shifted.where.from()
	 
{{ :
	=> use_def 

}} :
	=> use_decl

{{FunctionBody}} :
	{{ FunctionBody }} => $2

{{Initializer}} :
	{{ Initializer }} => $2